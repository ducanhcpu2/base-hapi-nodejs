{"version":3,"sources":["components/Modal/ModalTaoMoiUser.tsx","containers/User/index.tsx"],"names":["ModalTaoMoiUser","props","useState","listRoles","setListRoles","idRole","setIdRole","fullName","setFullName","nameRole","setNameRole","genderName","setGenderName","phoneNumber","setPhoneNumber","password","setPassword","gender","setGender","email","setEmail","t","useTranslation","dispatch","useDispatch","onHide","visible","modalTitle","item","onSuccessCreated","dropdownOpen","setOpen","dropdownOpenGender","setOpenGender","handleChangeTextboxValue","setValueFunction","event","currentTarget","value","handleChangeGenderValue","v","genderMame","handleChangeRoleValue","console","log","useEffect","get","getAllRolesWithoutPage","data","list","Modal","isOpen","className","ModalHeader","toggle","ModalBody","FormGroup","Label","Input","onChange","type","placeholder","ButtonDropdown","DropdownToggle","caret","DropdownMenu","DropdownItem","onClick","map","id","roleName","ModalFooter","Button","color","e","preventDefault","payloadCreate","updateUser","toast","registerUser","UserScreen","params","qs","parse","pageNumberUrl","pageitemsUrl","setData","totalPage","setTotalPage","toNumber","pageNumber","setPageNumber","pageSize","setPageSize","showModalTaoMoi","setShowModalTaoMoi","currentRow","setCurrentRow","toggleModalTaoMoi","getAllUser","length","total_pages","handleRedirectDetail","handleEditClick","row","columns","useMemo","Header","accessor","Cell","moment","format","Row","DataTable","disableOnClickCellEnd","onRowClick","Pagination","pageRangeDisplayed","marginPagesDisplayed","pageCount","onThisPaginationChange","selectedItem","selected","url","replaceUrlParam","window","location","pathname","search","replace","generatePath","pushSearchConditionToUrl"],"mappings":"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","file":"static/js/16.8e9db816.chunk.js","sourcesContent":["import React, { FormEvent, useEffect, useState } from 'react';\nimport { Button, Modal, ModalHeader, ModalFooter, ModalBody, FormGroup, Label, Input,\n    ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem} from 'reactstrap';\nimport { get, forEach, map } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport Typeahead from '../Input/Typeahead';\nimport {createReport, updateReport} from \"../../redux/BaoCaoLamViec/action\";\nimport {getAllRoles, getAllRolesWithoutPage} from \"../../redux/Roles/action\";\nimport {registerUser,updateUser} from \"../../redux/User/action\";\n\ninterface Props {\n    onHide: () => void;\n    onSuccessCreated: () => void;\n    visible: boolean;\n    modalTitle: string;\n    item?: any;\n}\n\nconst ModalTaoMoiUser: React.FC<Props> = (props: Props): JSX.Element => {\n    const [listRoles, setListRoles] = useState<any>([]);\n    const [idRole, setIdRole] = useState<number>(0);\n    const [fullName, setFullName] = useState<string>('');\n    const [nameRole, setNameRole] = useState<string>('');\n    const [genderName, setGenderName] = useState<string>('');\n    const [phoneNumber, setPhoneNumber] = useState<string>('');\n    const [password, setPassword] = useState<string>('');\n    const [gender, setGender] = useState<number>(1);\n    const [email, setEmail] = useState<string>('');\n\n    const { t } = useTranslation();\n    const dispatch = useDispatch();\n    const { onHide, visible, modalTitle, item, onSuccessCreated } = props;\n    const [dropdownOpen, setOpen] = useState(false);\n    const [dropdownOpenGender, setOpenGender] = useState(false);\n    const toggle = () => setOpen(!dropdownOpen);\n    const toggleGender = () => setOpenGender(!dropdownOpenGender);\n\n    useEffect(():void =>{\n        if(get(item,'original.id')){\n            setEmail(get(item,'original.email'));\n            setListRoles(get(item,'original.listRoles'));\n            setIdRole(get(item,'original.idRole'));\n            setNameRole(get(item,'original.nameRole'));\n            setGenderName(get(item,'original.genderName'));\n            setPhoneNumber(get(item,'original.phoneNumber'));\n            setGender(get(item,'original.gender'));\n            setPassword(get(item,'original.password'));\n            setFullName(get(item,'original.fullName'));\n        }else{\n            setEmail('');\n            setListRoles([]);\n            setIdRole(-1);\n            setNameRole('');\n            setGenderName('Nam');\n            setPhoneNumber('');\n            setGender(1);\n            setPassword('');\n            setFullName('');\n        }\n    },[item]);\n\n    useEffect(() => {\n        dispatch(\n            getAllRolesWithoutPage(\n                (data: any) => {\n                    setListRoles(data.list)\n                },\n                () => {}\n            )\n        )\n    },[visible])\n    function handleCreate(e: FormEvent): void {\n        e.preventDefault();\n        console.log(\"email = \",get(listRoles, '0.id'))\n        if (!email || !phoneNumber || !fullName || !gender || !password || !get(listRoles, '0.id')) {\n            toast(\n                <>\n                    <i className=\"fa fa-window-close mr-2\" />\n                    {t('không được để trống các trường')}\n                </>,\n                {\n                    type: 'error',\n                },\n            );\n            return\n        }\n        const payloadCreate = {\n            fullName: fullName,\n            idRole: idRole,\n            phoneNumber: phoneNumber,\n            email: email,\n            gender: gender,\n            password: password\n        };\n\n        if(!get(item, 'original.id')){\n            dispatch(\n                registerUser(payloadCreate,\n                    (data: any):void => {\n                        onSuccessCreated()\n                        toast(\n                            <>\n                                <i className=\"fa fa-check-square mr-2\" />\n                                {t('Tạo người dùng ')} {t('thành công')}\n                            </>,\n                            {\n                                type: 'success',\n                            },\n                        );\n                    },\n                    (): void => {\n                        toast(\n                            <>\n                                <i className=\"fa fa-window-close mr-2\" />\n                                {t('Đã có lỗi xảy ra ')}\n                            </>,\n                            {\n                                type: 'error',\n                            },\n                        );\n                    }\n                    ),\n            );\n\n        } else {\n            dispatch(\n                updateUser({...payloadCreate, id: get(item, 'original.id')},\n                    (data: any): void => {\n                        onSuccessCreated();\n                        // const thisId = get(data, 'MT_ZTMI016_OUT.IV_TOR_ID_CU', '');\n                        toast(\n                            <>\n                                <i className=\"fa fa-check-square mr-2\" />\n                                {t('Cập nhật báo cáo')} {t('thành công')}\n                            </>,\n                            {\n                                type: 'success',\n                            },\n                        );\n                        // alert(`Tạo thành công! Mã: ${thisId}`);\n                    },\n                    (): void => {\n                        toast(\n                            <>\n                                <i className=\"fa fa-window-close mr-2\" />\n                                {t('Đã có lỗi xảy ra ')}\n                            </>,\n                            {\n                                type: 'error',\n                            },\n                        );\n                        // alert(t('Có lỗi xảy ra!'));\n                    },\n                ),\n            );\n        }\n    }\n    function handleChangeTextboxValue(setValueFunction: Function): (event: React.FormEvent<HTMLInputElement>) => void {\n        return (event: React.FormEvent<HTMLInputElement>): void => {\n            setValueFunction(event.currentTarget.value);\n        };\n    }\n    function handleChangeGenderValue(v: number,genderMame: string):(event: React.MouseEvent) => void {\n        return (event: React.MouseEvent): void => {\n            setGender(v)\n            setGenderName(genderMame)\n        }\n    }\n    function handleChangeRoleValue(v: number,nameRole: string): (event: React.MouseEvent)  => void {\n        return (event: React.MouseEvent): void => {\n            console.log(\"role id = \",v)\n            setIdRole(v)\n            setNameRole(nameRole)\n\n        }\n    }\n    return(\n        <Modal isOpen={visible} className=\"sipTitleModalCreateNew\">\n            <ModalHeader toggle={onHide}>{modalTitle}</ModalHeader>\n            <ModalBody>\n                <FormGroup>\n                    <Label>{t('Họ và tên')}</Label>\n                    <Input\n                        value={fullName}\n                        onChange={handleChangeTextboxValue(setFullName)}\n                        type=\"textarea\"\n                        placeholder={t('Nhập họ tên')}\n                    />\n\n                </FormGroup>\n                <FormGroup>\n                    <Label>{t('Email')}</Label>\n                    <Input\n                        value={email}\n                        onChange={handleChangeTextboxValue(setEmail)}\n                        type=\"textarea\"\n                        placeholder={t('Nhập Email')}\n                    />\n                </FormGroup>\n                <FormGroup>\n                    <Label>{t('Số điện thoại')}</Label>\n                    <Input\n                        value={phoneNumber}\n                        onChange={handleChangeTextboxValue(setPhoneNumber)}\n                        type=\"textarea\"\n                        placeholder={t('Nhập số điện thoại')}\n                    />\n                </FormGroup>\n                <FormGroup>\n                    <Label>{t('Mật khẩu')}</Label>\n                    <Input\n                        type={\"password\"}\n                        value={password}\n                        onChange={handleChangeTextboxValue(setPassword)}\n                        placeholder={t('Nhập mật khẩu')}\n                    />\n                </FormGroup>\n                <FormGroup>\n                    <Label>{t('Chọn giới tính')}</Label>\n                    <ButtonDropdown isOpen={dropdownOpenGender} toggle={toggleGender}>\n                        <DropdownToggle caret>\n                            {genderName}\n                        </DropdownToggle>\n                        <DropdownMenu>\n                            <DropdownItem onClick={handleChangeGenderValue(1,\"Nam\")}>Nam</DropdownItem>\n                            <DropdownItem onClick={handleChangeGenderValue(0,\"Nữ\")}>Nữ</DropdownItem>\n                        </DropdownMenu>\n                    </ButtonDropdown>\n                </FormGroup>\n                <FormGroup>\n                    <Label>{t('Chọn quyền hạn')}</Label>\n                    <ButtonDropdown isOpen={dropdownOpen} toggle={toggle}>\n                        <DropdownToggle caret>\n                            {nameRole}\n                        </DropdownToggle>\n                        <DropdownMenu>\n                            {\n                                map(listRoles, (item: any) => (\n                                    <DropdownItem onClick={handleChangeRoleValue(item.id,item.roleName)}>{item.roleName}</DropdownItem>\n                                ))\n                            }\n                        </DropdownMenu>\n                    </ButtonDropdown>\n                </FormGroup>\n            </ModalBody>\n            <ModalFooter className=\"justify-content-end\">\n                <Button color=\"primary\" onClick={handleCreate}>\n                    {t('Ghi lại')}\n                </Button>\n            </ModalFooter>\n        </Modal>\n    )\n}\nexport default ModalTaoMoiUser;\n","/* eslint-disable max-lines */\nimport React, {FormEvent, useEffect, useMemo, useState} from 'react';\nimport { Button, Row } from 'reactstrap';\nimport { useDispatch } from 'react-redux';\nimport { generatePath, match } from 'react-router-dom';\nimport { replace } from 'connected-react-router';\nimport { get, toNumber} from 'lodash';\nimport qs from 'query-string';\n\nimport DataTable from '../../components/DataTable';\nimport Pagination from '../../components/Pagination';\nimport replaceUrlParam from '../../utils/replaceUrlParam';\nimport { getAllUser } from '../../redux/User/action';\nimport moment from 'moment';\nimport ModalTaoMoiUser from \"../../components/Modal/ModalTaoMoiUser\";\n// eslint-disable-next-line import/imports-first\n\ninterface Props {\n  match: match;\n}\n\n// eslint-disable-next-line max-lines-per-function\nconst UserScreen: React.FC<Props> = (props: Props): JSX.Element => {\n  const dispatch = useDispatch();\n  const params = qs.parse(get(props, 'location.search'));\n  const pageNumberUrl = get(params,\"pageNumber\");\n  const pageitemsUrl = get(params,\"pageitems\");\n  const [data, setData] = useState<any>([]);\n  const [totalPage, setTotalPage] = useState<number>(0);\n  const [pageNumber, setPageNumber] = useState<number>(pageNumberUrl ? toNumber(pageNumberUrl) : 1);\n  const [pageSize, setPageSize] = useState<number>(pageitemsUrl ? toNumber(pageitemsUrl) : 20);\n  const [showModalTaoMoi, setShowModalTaoMoi] = useState<boolean>(false);\n  const [currentRow, setCurrentRow] = useState<any>({});\n  const toggleModalTaoMoi = (): void => {\n    if(showModalTaoMoi === true) setCurrentRow({})\n    setShowModalTaoMoi(!showModalTaoMoi);\n  };\n  useEffect(() => {\n    dispatch(\n      getAllUser({\n        pageNumber: pageNumber,\n        pageSize: pageSize\n      },\n        (data: any) => {\n          if(data.list.length >= 0){\n            setData(data.list)\n            setTotalPage(toNumber(data.total_pages))\n          }\n        },\n        () => {}\n      )\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [pageNumber,pageSize]);\n\n  const pushSearchConditionToUrl = (pageNumber: number): void => {\n    const url = replaceUrlParam(window.location.pathname + window.location.search, {\n      pageNumber: pageNumber,\n    });\n    dispatch(replace(generatePath(url)));\n  };\n\n  const handleRedirectDetail = (): void => {\n    // dispatch(\n    //   push(\n    //     generatePath(routesMap.THONG_TIN_BAO_CAO, {\n    //       idBaoCao: item.id,\n    //     }),\n    //   ),\n    // );\n  };\n\n  function handleEditClick(\n    row: any,\n  ): (event: React.MouseEvent) => void {\n    return (): void => {\n      console.log(\"row: \",row);\n      setCurrentRow(row)\n        toggleModalTaoMoi()\n    };\n  }\n\n  const onPaginationChange = (selectedItem: { selected: number }): void => {\n    setPageNumber(selectedItem.selected+1)\n    pushSearchConditionToUrl(selectedItem.selected+1);\n  };\n\n  const columns = useMemo(\n    // eslint-disable-next-line max-lines-per-function\n    () => [\n      {\n        Header: 'ID',\n        accessor: 'id',\n      },\n      {\n        Header: 'Họ tên',\n        accessor: 'fullName',\n      },\n      {\n        Header: 'Email',\n        accessor: 'email',\n      },\n      {\n        Header: 'Số điện thoại',\n        accessor: 'phoneNumber',\n      },\n      {\n        Header: 'Giới tính',\n        accessor: 'gender',\n        Cell: ({ row }: any): JSX.Element => (\n          <div>\n              {get(row,'values.gender','') === 1 ? 'Nam' : 'Nữ' }\n          </div>\n        ),\n      },\n      {\n        Header: 'Quyền hạn',\n        accessor: 'roleName',\n      },\n      {\n        Header: 'Ngày tạo',\n        accessor: 'createdAt',\n        Cell: ({ row }: any): JSX.Element => (\n          <>{moment(get(row,'values.createdAt','')).format('hh:mm DD/MM/YYYY')}</>\n        ),\n      },\n      {\n        Header: 'Ngày cập nhật',\n        accessor: 'updatedAt',\n        Cell: ({ row }: any): JSX.Element => (\n          <>{moment(get(row,'values.updatedAt','')).format('hh:mm DD/MM/YYYY')}</>\n        ),\n      },\n      {\n        Header: 'Quản trị',\n        accessor: '',\n        Cell: ({ row }: any): JSX.Element => (\n          <Button className=\"ml-2\" color=\"primary\"\n            onClick={handleEditClick(row)}\n          >\n            <i className=\"fa fa-pencil mr-2\" />\n              {'Sửa'}\n          </Button>\n        ),\n      },\n    ],\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [],\n  );\n  const registerNewUser = (): void => {\n     setShowModalTaoMoi(!showModalTaoMoi);\n  }\n  const getListUsers = (): void => {\n      dispatch(\n          dispatch(\n              getAllUser({\n                      pageNumber: pageNumber,\n                      pageSize: pageSize\n                  },\n                  (data: any) => {\n                      if(data.list.length >= 0){\n                          setData(data.list)\n                          setTotalPage(toNumber(data.total_pages))\n                      }\n                  },\n                  () => {}\n              )\n          )\n      )\n      toggleModalTaoMoi()\n  }\n  function renderTable(): JSX.Element {\n    return (\n      <Row className=\"sipTableContainer sipTableRowClickable\">\n        <DataTable disableOnClickCellEnd={true} columns={columns} data={data} onRowClick={handleRedirectDetail} />\n      </Row>\n    );\n  }\n  return (\n    <>\n      <Row className=\"mb-3 sipTitleContainer\">\n        <h1 className=\"sipTitle\">{'Thông tin người dùng'}</h1>\n        {/* <RootTypeahead\n          id=\"location\"\n          //  labelKey={labelKeyLocation}\n          options={listLocation}\n          placeholder=\"Chọn đơn vị\"\n        // onInputChange={setKeywords}\n        //  onChange={handleSelectedLocation}\n        //  selected={selectedLocation}\n        >\n          <span\n            style={{\n              position: 'absolute',\n              right: '8px',\n              top: '10px',\n            }}\n            className=\"fa fa-caret-down\"\n          />\n        </RootTypeahead> */}\n        <div className=\"sipTitleRightBlock\">\n          <Button className=\"ml-2\" color=\"primary\" onClick={registerNewUser}>\n          <i className=\"fa fa-pencil mr-2\" />\n            {'Thêm mới'}\n          </Button>\n          {/* <Button className=\"ml-2\" color=\"primary\" >\n            <i className=\"fa fa-pencil mr-2\" />\n            {'Sửa'}\n          </Button> */}\n          {/* <Button className=\"ml-2\" color=\"primary\">\n            <img src={'../../assets/img/icon/iconInBuuGui.svg'} alt=\"VTPostek\" />\n            {'In bưu gửi'}\n          </Button> */}\n        </div>\n      </Row>\n      <h1 className=\"sipTitle\">{'Danh sách người dùng'}</h1>\n      {renderTable()}\n      <Pagination\n        pageRangeDisplayed={2}\n        marginPagesDisplayed={2}\n        pageCount={totalPage}\n        onThisPaginationChange={onPaginationChange}\n        setPageSize={setPageSize}\n      />\n      <ModalTaoMoiUser\n          visible={showModalTaoMoi}\n          onSuccessCreated={getListUsers}\n          onHide={toggleModalTaoMoi}\n          modalTitle={'Tạo mới người dùng'}\n          item={currentRow}\n      />\n    </>\n  // ) : (\n  //   <Fade in={true} timeout={1000}>\n  //     <Row className=\"mb-3 sipTitleContainer\">\n  //       {/* <h1 className=\"sipTitle\">\n  //         <ButtonGoBack />\n  //         {t('Quay lại')}\n  //       </h1> */}\n  //     </Row>\n  //     <div className=\"row mb-5\" />\n  //     <h3 className=\"text-center\">{'Không tìm thấy thông tin phiếu gửi!'}</h3>\n  //   </Fade>\n  );\n};\n\nexport default UserScreen;\n"],"sourceRoot":""}