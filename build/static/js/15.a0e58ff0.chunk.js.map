{"version":3,"sources":["components/Modal/ModalRole.tsx","components/Modal/ModalPopupConfirm.tsx","containers/Roles/index.tsx"],"names":["ModalRole","props","setValueFunction","t","useTranslation","dispatch","useDispatch","onHide","onSuccessCreated","visible","modalTitle","item","useState","data","setData","roleName","setRoleName","onChangeRole","event","dataRole","map","item1","id","checked","onChangeAllRole","useEffect","get","getDetailRole","pageNumber","pageSize","data1","list","length","findIndex","idSubRole","getAllSubRoles","Modal","isOpen","className","ModalHeader","toggle","ModalBody","FormGroup","Label","Input","value","onChange","currentTarget","placeholder","Row","style","justifyContent","Button","color","onClick","key","toString","subRoleName","CustomInput","type","name","RoleCode","ModalFooter","e","preventDefault","payload","status","payloadUpdate","idRole","updateRole","toast","createRole","ModalPopupConfirm","modal","setModal","classNameBtn","title","buttonLabel","src","alt","titleModal","contentConfirm","handleDoSomething","saveButton","cancelButton","RolesScreen","params","qs","parse","pageNumberUrl","pageitemsUrl","totalPage","setTotalPage","toNumber","setPageNumber","setPageSize","showModalTaoMoi","setShowModalTaoMoi","currentRow","setCurrentRow","getAllRoles","total_pages","handleRedirectDetail","push","generatePath","routesMap","THONG_TIN_CHI_TIET_ROLE","handleEditClick","row","handleRemoveClick","deleteRole","success","toggleModalTaoMoi","columns","useMemo","Header","accessor","Cell","Col","DataTable","disableOnClickCellEnd","onRowClick","Pagination","pageRangeDisplayed","marginPagesDisplayed","pageCount","onThisPaginationChange","selectedItem","selected","url","replaceUrlParam","window","location","pathname","search","replace","pushSearchConditionToUrl"],"mappings":"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","file":"static/js/15.a0e58ff0.chunk.js","sourcesContent":["import React, { FormEvent, useEffect, useState } from 'react';\nimport { Button, Modal, ModalHeader, ModalFooter, ModalBody, FormGroup, Label, CustomInput, Input, Col, Row } from 'reactstrap';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { createDetailReport } from '../../redux/BaoCaoLamViec/action';\nimport { filter, get, map } from 'lodash';\nimport { createRole, getAllSubRoles, getDetailRole, updateRole } from '../../redux/Roles/action';\n\ninterface Props {\n    onHide: () => void;\n    onSuccessCreated: () => void;\n    visible: boolean;\n    modalTitle: string;\n    item?: any\n}\n\n// eslint-disable-next-line max-lines-per-function\nconst ModalRole: React.FC<Props> = (props: Props): JSX.Element => {\n    const { t } = useTranslation();\n    const dispatch = useDispatch();\n    const { onHide, onSuccessCreated, visible, modalTitle, item } = props;\n\n    const [data, setData] = useState<any>([]);\n    const [roleName, setRoleName] = useState<string>('');\n\n    useEffect((): void => {\n        if (get(item, \"original.id\")) {\n\n            setRoleName(get(item, \"original.roleName\", \"\"))\n            dispatch(\n                getDetailRole({ id: get(item, \"original.id\"), pageNumber: 1, pageSize: 1000 },\n                    (data1: any) => {\n                        if (data1.list.length >= 0) {\n\n                            const dataRole = map(data, item => {\n                                if (data1.list.findIndex((item1: any) => item.id === item1.idSubRole) !== -1) {\n                                    return {\n                                        ...item,\n                                        checked: true\n                                    }\n                                } else {\n                                    return {\n                                        ...item,\n                                        checked: false\n                                    }\n                                }\n                            })\n\n                            setData(dataRole)\n                        }\n                    },\n                    () => { }\n                )\n            )\n        } else {\n            setRoleName(\"\")\n            const dataRole = map(data, item => {\n                return {\n                    ...item,\n                    checked: false\n                }\n            })\n            setData(dataRole)\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [item]);\n\n    useEffect((): void => {\n        dispatch(\n            getAllSubRoles({},\n                (data: any) => {\n                    if (data.list.length >= 0) {\n                        setData(map(data.list, (item: any) => {\n                            return {\n                                ...item,\n                                checked: false\n                            }\n                        }))\n                    }\n                },\n                () => { }\n            )\n        )\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    function handleCreate(e: FormEvent): void {\n        e.preventDefault();\n        // const dataRole = filter(data, (item: any) => item.checked === true)\n        const payloadCreate = map(data, (item: any) => {\n            return {\n                roleName: roleName,\n                idSubRole: item.id,\n                RoleCode: item.RoleCode,\n                subRoleName: item.subRoleName,\n                status: item.checked === true ? 1 : 0\n            }\n        });\n\n        const payload = {\n            data: payloadCreate\n        }\n        if (!get(item, \"original.id\")) {\n            dispatch(\n                createRole(payload,\n                    (): void => {\n                        onSuccessCreated();\n                        toast(\n                            <>\n                                <i className=\"fa fa-check-square mr-2\" />\n                                {t('Tạo quyền')} {t('thành công')}\n                            </>,\n                            {\n                                type: 'success',\n                            },\n                        );\n                    },\n                    (): void => {\n                        toast(\n                            <>\n                                <i className=\"fa fa-window-close mr-2\" />\n                                {t('Đã có lỗi xảy ra ')}\n                            </>,\n                            {\n                                type: 'error',\n                            },\n                        );\n                    },\n                ),\n            );\n        } else {\n            const payloadUpdate = payload.data.map(item1 => {\n                return { ...item1, idRole: get(item, \"original.id\") }\n            })\n            dispatch(\n                updateRole({ data: payloadUpdate },\n                    (): void => {\n                        onSuccessCreated();\n                        toast(\n                            <>\n                                <i className=\"fa fa-check-square mr-2\" />\n                                {t('Cập nhật quyền')} {t('thành công')}\n                            </>,\n                            {\n                                type: 'success',\n                            },\n                        );\n                    },\n                    (): void => {\n                        toast(\n                            <>\n                                <i className=\"fa fa-window-close mr-2\" />\n                                {t('Đã có lỗi xảy ra ')}\n                            </>,\n                            {\n                                type: 'error',\n                            },\n                        );\n                    },\n                ),\n            );\n        }\n    }\n\n    function onChangeRole(item: any): (event: React.FormEvent<HTMLInputElement>) => void {\n        return (event: React.FormEvent<HTMLInputElement>): void => {\n            const dataRole = map(data, (item1: any) => {\n                if (item.id !== item1.id) {\n                    return {\n                        ...item1\n                    }\n                }\n                return {\n                    ...item,\n                    checked: !item.checked\n                }\n            })\n            setData(dataRole)\n        };\n    }\n\n    function onChangeAllRole(checked: boolean): (event: React.MouseEvent) => void {\n        return (event: React.MouseEvent): void => {\n            const dataRole = map(data, (item: any) => {\n                return {\n                    ...item,\n                    checked: checked\n                }\n            })\n            setData(dataRole)\n        };\n    }\n\n    function handleChangeTextboxValue(setValueFunction: Function): (event: React.FormEvent<HTMLInputElement>) => void {\n        return (event: React.FormEvent<HTMLInputElement>): void => {\n            setValueFunction(event.currentTarget.value);\n        };\n    }\n\n    return (\n        <Modal isOpen={visible} className=\"sipTitleModalCreateNew\">\n            <ModalHeader toggle={onHide}>{modalTitle}</ModalHeader>\n            <ModalBody>\n                <FormGroup>\n                    <Label>{t('Tên quyền')}</Label>\n                    <Input\n                        value={roleName}\n                        onChange={handleChangeTextboxValue(setRoleName)}\n                        placeholder={t('Nhập tên quyền')}\n                    />\n                </FormGroup>\n                <Row className=\"pl-1 pt-3\" style={{ justifyContent: \"space-around\" }}>\n                    <FormGroup>\n                        <Button color=\"primary\" onClick={onChangeAllRole(true)}>Chọn tất cả</Button>\n                    </FormGroup>\n                    <FormGroup>\n                        <Button color=\"primary\" onClick={onChangeAllRole(false)}>Bỏ chọn tất cả</Button>\n                    </FormGroup>\n                </Row>\n                <Row className=\"pl-1 pt-3\" style={{ justifyContent: \"space-around\" }}>\n                    {map(data, (item: any) => (\n                        <FormGroup key={item.id.toString()}>\n                            <Label>{item.subRoleName}</Label>\n                            <CustomInput\n                                type=\"switch\"\n                                id={item.id.toString()}\n                                name={item.RoleCode}\n                                checked={item.checked}\n                                onChange={onChangeRole(item)}\n                            />\n                        </FormGroup>\n                    ))}\n                </Row>\n            </ModalBody>\n            <ModalFooter className=\"justify-content-end\">\n                <Button color=\"primary\" onClick={handleCreate}>\n                    {t('Ghi lại')}\n                </Button>\n            </ModalFooter>\n        </Modal>\n    );\n};\n\nexport default ModalRole;\n","import React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalFooter, ModalBody } from 'reactstrap';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\ninterface Props {\r\n  buttonLabel?: JSX.Element;\r\n  className?: string;\r\n  handleDoSomething: Function;\r\n  saveButton?: string;\r\n  cancelButton?: string;\r\n  titleModal?: string;\r\n  contentConfirm?: string;\r\n  classNameBtn?: string;\r\n}\r\n\r\nconst ModalPopupConfirm: React.FC<Props> = (props: Props): JSX.Element => {\r\n  const [modal, setModal] = useState(false);\r\n  const { t } = useTranslation();\r\n\r\n  function toggle(): void {\r\n    setModal(!modal);\r\n  }\r\n\r\n  function handleDoSomething(): void {\r\n    props.handleDoSomething();\r\n    setModal(false);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        className={props.classNameBtn ? props.classNameBtn : 'SipTableFunctionIcon'}\r\n        onClick={toggle}\r\n        color=\"primary\"\r\n        title={t('Xóa')}\r\n      >\r\n        {props.buttonLabel ? props.buttonLabel : <img src={'../../assets/img/icon/iconRemove.svg'} alt=\"VTPostek\" />}\r\n      </Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={props.className ? props.className : 'sipTitleModalCreateNew'}>\r\n        <ModalHeader toggle={toggle}>{props.titleModal ? props.titleModal : t('Xác nhận')}</ModalHeader>\r\n        <ModalBody>\r\n          <p>{props.contentConfirm ? props.contentConfirm : t('Bạn có muốn xóa không?')}</p>\r\n        </ModalBody>\r\n        <ModalFooter className=\"justify-content-end\">\r\n          <Button color=\"primary\" onClick={handleDoSomething}>\r\n            {props.saveButton ? props.saveButton : t('Xóa')}\r\n          </Button>\r\n          <Button onClick={toggle}>{props.cancelButton ? props.cancelButton : t('Hủy')}</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ModalPopupConfirm;\r\n","/* eslint-disable max-lines */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { Button, Col, Row } from 'reactstrap';\nimport { useDispatch } from 'react-redux';\nimport { generatePath, match } from 'react-router-dom';\n// import { Cell } from 'react-table';\nimport { push, replace } from 'connected-react-router';\nimport { get, toNumber } from 'lodash';\nimport qs from 'query-string';\nimport DataTable from '../../components/DataTable';\n// import { numberFormat } from '../../utils/common';\n// import parse_query_string from '../../utils/parse_query_string';\nimport routesMap from '../../utils/routesMap';\nimport { deleteRole, getAllRoles } from '../../redux/Roles/action';\nimport replaceUrlParam from '../../utils/replaceUrlParam';\nimport Pagination from '../../components/Pagination';\nimport ModalRole from '../../components/Modal/ModalRole';\nimport { toast } from 'react-toastify';\nimport ModalPopupConfirm from '../../components/Modal/ModalPopupConfirm';\n// eslint-disable-next-line import/imports-first\n\ninterface Props {\n  match: match;\n}\n\n// eslint-disable-next-line max-lines-per-function\nconst RolesScreen: React.FC<Props> = (props: Props): JSX.Element => {\n  const dispatch = useDispatch();\n  const params = qs.parse(get(props, 'location.search'));\n  const pageNumberUrl = get(params, \"pageNumber\");\n  const pageitemsUrl = get(params, \"pageitems\");\n  const [totalPage, setTotalPage] = useState<number>(1);\n  const [data, setData] = useState<any>([]);\n  const [pageNumber, setPageNumber] = useState<number>(pageNumberUrl ? toNumber(pageNumberUrl) : 1);\n  const [pageSize, setPageSize] = useState<number>(pageitemsUrl ? toNumber(pageitemsUrl) : 20);\n  const [showModalTaoMoi, setShowModalTaoMoi] = useState<boolean>(false);\n  const [currentRow, setCurrentRow] = useState<any>({});\n  // const idDonHang = get(props, 'match.params.idDonHang');\n  useEffect(() => {\n    dispatch(\n      getAllRoles({\n        pageNumber: pageNumber,\n        pageSize: pageSize\n      },\n        (data: any) => {\n          if (data.list.length >= 0) {\n            setData(data.list)\n            setTotalPage(toNumber(data.total_pages))\n          }\n        },\n        () => { }\n      )\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleRedirectDetail = (item: any): void => {\n    dispatch(\n      push(\n        generatePath(routesMap.THONG_TIN_CHI_TIET_ROLE, {\n          idRole: item.id,\n        }),\n      ),\n    );\n  };\n\n  function handleEditClick(\n    row: any,\n  ): (event: React.MouseEvent) => void {\n    return (): void => {\n      setCurrentRow(row)\n      setShowModalTaoMoi(!showModalTaoMoi);\n    };\n  }\n\n  function handleRemoveClick(\n    row: any,\n  ): (event: React.MouseEvent) => void {\n    return (): void => {\n      dispatch(\n        deleteRole({\n          idRole: get(row, \"original.id\")\n        },\n          (data: any) => {\n            toast.success(`Xoá quyền ${get(row, \"original.roleName\", \"\")} thành công`)\n            dispatch(\n              getAllRoles({\n                pageNumber: pageNumber,\n                pageSize: pageSize\n              },\n                (data: any) => {\n                  if (data.list.length >= 0) {\n                    setData(data.list)\n                    setTotalPage(toNumber(data.total_pages))\n                  }\n                },\n                () => { }\n              )\n            )\n          },\n          () => { }\n        )\n      )\n    };\n  }\n\n  const pushSearchConditionToUrl = (pageNumber: number): void => {\n    const url = replaceUrlParam(window.location.pathname + window.location.search, {\n      pageNumber: pageNumber,\n    });\n    dispatch(replace(generatePath(url)));\n  };\n\n  const onPaginationChange = (selectedItem: { selected: number }): void => {\n    setPageNumber(selectedItem.selected + 1)\n    pushSearchConditionToUrl(selectedItem.selected + 1);\n  };\n\n  const toggleModalTaoMoi = (): void => {\n    if (showModalTaoMoi === true) setCurrentRow({})\n    setShowModalTaoMoi(!showModalTaoMoi);\n  };\n\n  const getListRole = (): void => {\n    dispatch(\n      getAllRoles({\n        pageNumber: pageNumber,\n        pageSize: pageSize\n      },\n        (data: any) => {\n          if (data.list.length >= 0) {\n            setData(data.list)\n            setTotalPage(toNumber(data.total_pages))\n          }\n        },\n        () => { }\n      )\n    )\n    toggleModalTaoMoi()\n  };\n\n  const columns = useMemo(\n    // eslint-disable-next-line max-lines-per-function\n    () => [\n      {\n        Header: 'ID',\n        accessor: 'id',\n      },\n      {\n        Header: 'Tên quyền',\n        accessor: 'roleName',\n      },\n      {\n        Header: 'Quản trị',\n        accessor: '',\n        Cell: ({ row }: any): JSX.Element => (\n          <Col>\n            <Button className=\"ml-2\" color=\"primary\"\n              onClick={handleEditClick(row)}\n            >\n              <i className=\"fa fa-pencil mr-2\" />\n              {'Sửa'}\n            </Button>\n            {/* <Button className=\"ml-2\" color=\"primary\"\n              onClick={handleRemoveClick(row)}\n            >\n              <i className=\"fa fa-trash mr-2\" />\n              {'Xoá'}\n            </Button> */}\n            <ModalPopupConfirm classNameBtn=\"ml-2\"\n              buttonLabel={\n                <>\n                  <i className=\"fa fa-trash mr-2\" />\n                  {'Xoá'}\n                </>\n              } \n              handleDoSomething={handleRemoveClick(row)} />\n          </Col>\n        ),\n      },\n    ],\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [],\n  );\n\n  function renderTable(): JSX.Element {\n    return (\n      <Row className=\"sipTableContainer sipTableRowClickable\">\n        <DataTable disableOnClickCellEnd={true} columns={columns} data={data} onRowClick={handleRedirectDetail} />\n      </Row>\n    );\n  }\n  return (\n    <>\n      <Row className=\"mb-3 sipTitleContainer\">\n        <h1 className=\"sipTitle\">{'Thông tin quyền'}</h1>\n        {/* <RootTypeahead\n          id=\"location\"\n          //  labelKey={labelKeyLocation}\n          options={listLocation}\n          placeholder=\"Chọn đơn vị\"\n        // onInputChange={setKeywords}\n        //  onChange={handleSelectedLocation}\n        //  selected={selectedLocation}\n        >\n          <span\n            style={{\n              position: 'absolute',\n              right: '8px',\n              top: '10px',\n            }}\n            className=\"fa fa-caret-down\"\n          />\n        </RootTypeahead> */}\n        <div className=\"sipTitleRightBlock\">\n          <Button className=\"ml-2\" color=\"primary\"\n            onClick={toggleModalTaoMoi}\n          >\n            <i className=\"fa fa-pencil mr-2\" />\n            {'Thêm mới'}\n          </Button>\n          {/* <Button className=\"ml-2\" color=\"primary\" >\n            <i className=\"fa fa-pencil mr-2\" />\n            {'Sửa'}\n          </Button> */}\n          {/* <Button className=\"ml-2\" color=\"primary\">\n            <img src={'../../assets/img/icon/iconInBuuGui.svg'} alt=\"VTPostek\" />\n            {'In bưu gửi'}\n          </Button> */}\n        </div>\n      </Row>\n      <h1 className=\"sipTitle\">{'Danh sách quyền'}</h1>\n      {renderTable()}\n      <Pagination\n        pageRangeDisplayed={2}\n        marginPagesDisplayed={2}\n        pageCount={totalPage}\n        onThisPaginationChange={onPaginationChange}\n        setPageSize={setPageSize}\n      />\n      <ModalRole\n        visible={showModalTaoMoi}\n        onSuccessCreated={getListRole}\n        onHide={toggleModalTaoMoi}\n        modalTitle={'Tạo quyền'}\n        item={currentRow}\n      />\n    </>\n    //   ) : (\n    //     <Fade in={true} timeout={1000}>\n    //       <Row className=\"mb-3 sipTitleContainer\">\n    //         {/* <h1 className=\"sipTitle\">\n    //           <ButtonGoBack />\n    //           {t('Quay lại')}\n    //         </h1> */}\n    //       </Row>\n    //       <div className=\"row mb-5\" />\n    //       <h3 className=\"text-center\">{'Không tìm thấy thông tin phiếu gửi!'}</h3>\n    //     </Fade>\n  );\n};\n\nexport default RolesScreen;\n"],"sourceRoot":""}